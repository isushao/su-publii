<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>𝓼𝓾.𝓼𝓱𝓪𝓸.blog</title>
    <link href="https://isushao.github.io/su-publii/feed.xml" rel="self" />
    <link href="https://isushao.github.io/su-publii" />
    <updated>2022-08-13T20:08:12+08:00</updated>
    <author>
        <name>Roc Su</name>
    </author>
    <id>https://isushao.github.io/su-publii</id>

    <entry>
        <title>Mongo学习路程</title>
        <author>
            <name>Roc Su</name>
        </author>
        <link href="https://isushao.github.io/su-publii/mongoxue-xi-xin-lu.html"/>
        <id>https://isushao.github.io/su-publii/mongoxue-xi-xin-lu.html</id>

        <updated>2022-08-09T16:02:02+08:00</updated>
            <summary>
                <![CDATA[
                    <h3></h3>
<h1></h1>
<p>MongoDB是一个开源的，跨平台的分布式文档数据库。MongoDB由<a href="https://www.mongodb.com/company" target="_blank" rel="noreferrer noopener" _istranslated="1">MongoDB Inc.</a>开发。并被归类为NoSQL数据库。</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3></h3>
<h1></h1>
<p>MongoDB是一个开源的，跨平台的分布式文档数据库。MongoDB由<a href="https://www.mongodb.com/company" target="_blank" rel="noreferrer noopener" _istranslated="1">MongoDB Inc.</a>开发。并被归类为NoSQL数据库。</p>

<h1></h1>
<h1>MongoDB简介</h1>
<h2>1）易于使用</h2>
<p>MongoDB是一个面向文档的数据库。它使用文档的概念来存储数据，这比关系数据库管理系统（RDBMS）中的行概念更灵活。</p>
<p>文档允许您用单个记录表示复杂的层次结构关系。</p>
<p>MongoDB不需要预定义的架构，允许您更快地在文档中添加或删除字段。</p>
<h2>2） 设计用于横向扩展</h2>
<p>当数据库增长时，您将面临如何扩展它的挑战。有两种常见的方法：</p>
<ul>
<li>向上扩展 – 将当前服务器升级到具有更多资源（CPU，RAM等）的更大服务器。但是，获得更大的服务器意味着增加更多的成本。</li>
<li>横向扩展 – 购买其他服务器并将其添加到群集。这比纵向扩展更便宜，更具可扩展性。缺点是管理多台服务器比管理大型服务器需要更多的精力。</li>
</ul>
<p>MongoDB旨在向外扩展。</p>
<p>MongoDB允许您将数据拆分到许多服务器之间。它还会自动管理群集中的负载平衡、重新分发数据以及将更新路由到正确的服务器。</p>
<p>下图说明了MongoDB如何在多个服务器上使用分片进行横向扩展：</p>
<figure class="wp-block-image size-large"><figure class="wp-image-111"><img loading="lazy"  src="https://www.mongodbtutorial.org/wp-content/uploads/2020/08/what-is-mongodb-scale-out.png" data-is-external-image="true"  sizes="(max-width: 682px) 100vw, 682px" srcset="https://www.mongodbtutorial.org/wp-content/uploads/2020/08/what-is-mongodb-scale-out.png 682w, https://www.mongodbtutorial.org/wp-content/uploads/2020/08/what-is-mongodb-scale-out-300x152.png 300w" alt="" width="682" height="346"></figure></figure>
<h2>3）丰富的功能</h2>
<p>像任何数据库系统一样，MongoDB允许您插入，更新和删除以及选择数据。此外，它还支持其他功能，包括：</p>
<ul>
<li>索引</li>
<li>集合体</li>
<li>指定集合和索引类型</li>
<li>文件存储</li>
</ul>
<h2>4） 高性能</h2>
<p>MongoDB旨在从架构和功能的角度保持高性能。</p>
<p>MongoDB的理念是创建一个可扩展，灵活和快速的全功能数据库。</p>
<h1>MongoDB vs. MySQL</h1>
<p>MySQL使用结构化查询语言来访问存储的数据。在这种格式中，架构用于创建数据库结构，利用表作为标准化数据类型的一种方式，以便值可搜索并可以正确查询。MySQL是一个成熟的解决方案，可用于各种情况，包括网站数据库，应用程序和商业产品管理。</p>
<p>由于其刚性，当数据完整性和隔离至关重要时，例如在管理事务数据时，MySQL比MongoDB更可取。但是MongoDB限制较少的格式和更高的性能使其成为更好的选择，特别是当可用性和速度是主要问题时。</p>
<h1>MongoDB vs. Redis</h1>
<p>Redis是一个内存数据库存储，MongoDB被称为磁盘上的文档存储。尽管这两种解决方案都是为不同的目的而构建的，但它们通常一起使用以最大限度地提高NoSQL数据库的速度和效率。由于其缓存能力，Redis可以非常快速地找到所需的数据，作为摄取缓冲区，使MongoDB更加高效，并能够近乎实时地管理更大频率的文档更新。凭借MongoDB存储大量数据的能力以及Redis处理数据的能力，该配对为各种用例提供了强大的数据库管理解决方案。</p>
<p> </p>
<h1>MongoDB数据格式</h1>
<p>在MongoDB中，通常使用到JSON和BSON数据格式。</p>
<h2 id="json">JSON</h2>
<p>JSON 代表 JavaScript Object Notation。JSON 语法基于 JavaScript ECMA-262 第 3 版的子集。</p>
<p>JSON 文档是结构化格式的字段和值的集合。例如：</p>
<p><code>{<br>   "first_name": "John",<br>   "last_name": "Doe",<br>   "age": 22,<br>   "skills": ["Programming","Databases", "API"]<br>}</code></p>
<h2 id="bson">BSON</h2>
<p>BSON代表二进制JSON，它是类似JSON的文档的二进制编码序列化。</p>
<h2 id="documents">文档</h2>
<p>MongoDB将数据记录存储为BSON文档，这些文档简称为文档。</p>
<div class="wp-block-image">
<figure class="aligncenter size-large"><figure class="wp-image-241"><img loading="lazy"  src="https://www.mongodbtutorial.org/wp-content/uploads/2020/08/MongoDB-Document.png" data-is-external-image="true"  alt="" width="298" height="199"></figure></figure>
</div>
<p>文档是具有以下结构的一组字段和值对：</p>
<div><code>{<br>   field_name1: value1,<br>   field_name2: value2,<br>   field_name3: value3,<br>   ...<br>}</code></div>
<p>在此语法中，字段名称是字符串，值可以是数字、字符串、对象、数组等。例如：</p>
<div><code>{<br>    _id: ObjectId("5f339953491024badf1138ec"),<br>    title: "MongoDB Tutorial",<br>    isbn: "978-4-7766-7944-8",<br>    published_date: new Date('June 01, 2020'),<br>    author: { first_name: "John"<br>, last_name: "Doe"}<br>}</code></div>
<p>本文档具有以下字段和值对：</p>
<ul>
<li><code>_id</code>持有<code>ObjectId</code></li>
<li><code>title</code>保存一个字符串。</li>
<li><code>isbn</code>保存一个字符串。</li>
<li><code>published_date</code>保存该类型的值。<code>Date</code></li>
<li><code>author</code>包含包含两个字段和 的嵌入文档。<code>first_name</code><code>last_name</code></li>
</ul>
<p>如果您熟悉关系数据库管理系统（RDBMS），您会发现文档类似于表中的行，但它更具表现力。</p>
<p>字段名称具有以下限制：</p>
<ul>
<li>MongoDB保留该字段并使用它来唯一标识文档。<code>_id</code></li>
<li>字段名称不能包含空字符。</li>
<li>顶级字段名称不能以美元符号 （） 字符开头。<code>$</code></li>
</ul>
<h2 id="collections">集合</h2>
<p>MongoDB将文档存储在集合中。集合是一组文档。</p>
<div class="wp-block-image">
<figure class="aligncenter size-large"><figure class="wp-image-240"><img loading="lazy"  src="https://www.mongodbtutorial.org/wp-content/uploads/2020/08/MongoDB-Collection.png" data-is-external-image="true"  sizes="(max-width: 367px) 100vw, 367px" srcset="https://www.mongodbtutorial.org/wp-content/uploads/2020/08/MongoDB-Collection.png 367w, https://www.mongodbtutorial.org/wp-content/uploads/2020/08/MongoDB-Collection-300x190.png 300w" alt="" width="367" height="232" loading="lazy"></figure></figure>
</div>
<p>集合类似于 RDBMS 中的表。</p>
<figure class="wp-block-table is-style-regular">
<table>
<tbody>
<tr>
<td><strong>MongoDB</strong></td>
<td><strong>RDBMS</strong></td>
</tr>
<tr>
<td>文档</td>
<td>行</td>
</tr>
<tr>
<td>集合</td>
<td>表</td>
</tr>
</tbody>
</table>
</figure>
<p>与具有固定架构的表不同，集合具有动态架构。</p>
<p>这意味着集合可能包含具有任意数量不同“形状”的文档。例如，可以将以下文档存储在同一集合中：</p>
<p><code>{<br>    title: "MongoDB Tutorial",<br>    published_date: new Date('June 01, 2020')<br>}<br><br>{<br>    title: "MongoDB Basics",<br>    published_date: new Date('Jan 01, 2021'),<br>    isbn": "978-4-7766-7944-8"<br>}</code></p>
<p>请注意，第二个文档比第一个文档多一个字段。从理论上讲，您可以为每个文档设置完全不同的字段。</p>
<p>集合具有名称，例如 .集合名称不能：<code>books</code></p>
<ul>
<li>包含美元符号 （<code>$</code>)</li>
<li>包含空字符 （）。<code>\0</code></li>
<li>为空字符串。</li>
<li>从系统开始，因为MongoDB为内部集合名称保留了system*。</li>
</ul>
<h2 id="databases">数据库</h2>
<p>MongoDB将集合存储到数据库中。MongoDB的单个实例可以托管多个数据库。</p>
<div class="wp-block-image">
<figure class="aligncenter size-large"><figure class="wp-image-239"><img loading="lazy"  src="https://www.mongodbtutorial.org/wp-content/uploads/2020/08/MongoDB-Database-1.png" data-is-external-image="true"  sizes="(max-width: 308px) 100vw, 308px" srcset="https://www.mongodbtutorial.org/wp-content/uploads/2020/08/MongoDB-Database-1.png 308w, https://www.mongodbtutorial.org/wp-content/uploads/2020/08/MongoDB-Database-1-300x203.png 300w" alt="" width="308" height="208" loading="lazy"></figure></figure>
</div>
<p>数据库可以通过名称引用，例如 。数据库名称不能：<code>bookdb</code></p>
<ul>
<li>为空字符串 （）。<code>""</code></li>
<li>包含以下任意字符：<em>/</em>、<em>\</em>、<em>.</em>、<em>“</em>、<em>*</em>、<em>&lt;</em>、<em>&gt;</em>、<em>：</em>、<em>|</em>、<em>？</em>、<em>$</em>、（单个空格）或 <em>\0</em>（字符）。<code>null</code></li>
<li>超过最大大小 64 字节。</li>
</ul>
<p>MongoDB 还有一些保留的数据库名称，例如 、、，并且不能用于创建新数据库。<code>admin</code> <code>local</code> <code>config</code></p>
<h3 id="namespace">Namespace</h3>
<p>命名空间是数据库名称与该数据库中的集合的串联。命名空间允许您完全限定集合。</p>
<p>例如，如果集合名称为 ，而数据库名称为 ，则集合的命名空间将为 .<code>books</code> <code>bookdb</code> <code>books</code> <code>bookdb.books</code></p>
<h2 id="summary">总结</h2>
<ul>
<li>MongoDB将数据记录存储为BSON文档。文档是一组字段和值对。</li>
<li>MongoDB将文档存储在集合中，将集合存储在数据库中。</li>
<li>命名空间是数据库名称和集合名称 （） 的串联，用于完全限定集合。<code>database_name.collection_name</code></li>
</ul>
<h1>实践</h1>
<h2>安装</h2>
<ol>
<li>按照官方给出的不同环境的安装说明，进行选择安装。下载地址：<a href="https://www.mongodb.com/try/download/community" title="mongodb下载" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/try/download/community</a></li>
<li>安装mongoshell。下载地址：<a href="https://docs.mongodb.com/mongodb-shell" title="mongodb-shell 下载" target="_blank" rel="noopener noreferrer">https://docs.mongodb.com/mongodb-shell</a></li>
<li>设置auth</li>
</ol>
<p class="md-end-block md-p"><span class="md-plain">创建用户</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded" lang="bash" spellcheck="false"><span role="presentation">xxx\root&gt; mongsh</span><br><span role="presentation">test&gt; use admin</span><br><span role="presentation">amdin&gt; db.createUser(</span><br><span role="presentation">{</span><br><span role="presentation">user: <span class="cm-string">"admin"</span>,</span><br><span role="presentation">pwd: passwordPrompt(),</span><br><span role="presentation">roles: [ { role: <span class="cm-string">"userAdminAnyDatabase"</span>, db: <span class="cm-string">"admin"</span> } ]</span><br><span role="presentation">}</span><br><span role="presentation">)</span></pre>
<p><span class="md-plain">修改mongodb配置如下：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded" lang="yaml" spellcheck="false"><span role="presentation"><span class="cm-atom">security</span><span class="cm-meta">:</span></span><br><span role="presentation"><span class="cm-atom">  authorization</span><span class="cm-meta">: </span>enabled</span></pre>
<p class="md-end-block md-p"><span class="md-plain">再次访问</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded" lang="bash" spellcheck="false"><span role="presentation">xxx\root&gt; mongsh</span><br><span role="presentation">test&gt; use admin</span><br><span role="presentation">admin&gt; db.auth(<span class="cm-string">"admin"</span>,passwordPrompt())</span></pre>
<h2>CRUD</h2>
<h3>insertOne</h3>
<pre>db.collection.insertOne(<br>   &lt;document&gt;,<br>   { writeConcern: &lt;document&gt;}<br>)</pre>
<p>参数：</p>
<ul>
<li><code>document</code>是要插入的文档，必须。</li>
<li><code>writeConcern</code>是一个可选参数，描述MongoDB写关注点，用于将操作插入到独立的 MongoDB 服务器或共享集群。</li>
</ul>
<p>示例：</p>
<pre>db.books.insertOne({ <br>    title: 'MongoDB insertOne',<br>    isbn: '0-7617-6154-3'<br>});</pre>
<p>返回：</p>
<pre>{<br>        "acknowledged" : true,<br>        "insertedId" : ObjectId("5f31cf00902f22de3464ddc4")<br>}</pre>
<ul>
<li><code>acknowledged</code>是一个布尔值。如果执行插入时带有写入关注点，则将其设置为 true;如果禁用了写入关注点，则将其设置为 false。</li>
<li><code>insertedId</code>存储插入文档的字段值。<code>_id</code></li>
</ul>
<h3>insertMany</h3>
<pre>db.collection.insertMany(<br>   [document1, document2, ...],<br>   {<br>      writeConcern: &lt;document&gt;,<br>      ordered: &lt;boolean&gt;<br>   }<br>)</pre>
<p>第一个参数是要插入到集合中的文档数组。</p>
<p>第二个参数包含两个可选字段-值对的文档：</p>
<pre>{<br>   writeConcern: &lt;document&gt;,<br>   ordered: &lt;boolean&gt;<br>}</pre>
<p>同上writeConcern指写关注点，省略后会插入默认的写入关注点。</p>
<p>orderd用于确认 MongoDB 是否应该执行有序或无序插入。</p>
<p>当<code>ordered</code>设置为 时<code>true</code>，该<code>insertMany()</code>方法按顺序插入文档。这也是默认选项。</p>
<p>如果<code>ordered</code>设置为<code>false</code>，MongoDB 可能会在插入之前重新排序文档以提高性能。</p>
<p>示例：</p>
<pre>db.products.insertMany([<br>    { "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate": ISODate("2011-05-14"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 },"color":["white","black"],"storage":[64,128,256]},<br>    { "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate": ISODate("2011-09-01") , "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 },"color":["white","black","purple"],"storage":[128,256,512]},<br>    { "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate": ISODate("2015-01-14"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 },"color":["blue"],"storage":[16,64,128]},<br>    { "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate": ISODate("2020-05-14"),"spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 },"color":["white","orange","gold","gray"],"storage":[128,256,1024]},<br>    { "_id" : 5, "name" : "SmartPhone", "price" : 599,"releaseDate": ISODate("2022-09-14"), "spec" : { "ram" : 4, "screen" : 5.7, "cpu" : 1.66 },"color":["white","orange","gold","gray"],"storage":[128,256]}<br> ])</pre>
<h3>findOne</h3>
<pre>db.collection.findOne(query, projection)</pre>
<p>两个可选参数：<code>query</code>和<code>projection</code>.</p>
<ul>
<li><code>query</code>是一个指定选择标准的文档。</li>
<li><code>projection</code>是一个文档，它指定要返回的匹配文档中的字段。</li>
</ul>
<p>示例1：默认查询第一条</p>
<pre>db.products.findOne()</pre>
<p>返回：</p>
<pre>{<br>  _id: 1,<br>  name: 'xPhone',<br>  price: 799,<br>  releaseDate: ISODate("2011-05-14T00:00:00.000Z"),<br>  spec: { ram: 4, screen: 6.5, cpu: 2.66 },<br>  color: [ 'white', 'black' ],<br>  storage: [ 64, 128, 256 ]<br>}</pre>
<p>示例2：选择一些字段查询</p>
<pre>db.products.findOne({_id: 5}, {name: 1, id:0})</pre>
<p>返回：</p>
<pre>{"name" : "SmartPhone" }</pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>如何构建一个安全的Web应用</title>
        <author>
            <name>Roc Su</name>
        </author>
        <link href="https://isushao.github.io/su-publii/ce-shi.html"/>
        <id>https://isushao.github.io/su-publii/ce-shi.html</id>

        <updated>2022-08-13T20:08:12+08:00</updated>
            <summary>
                <![CDATA[
                    <blockquote>
<p>且夫水之积也不厚，则其负大舟也无力。</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <blockquote>
<p>且夫水之积也不厚，则其负大舟也无力。</p>

<p>覆杯水于坳堂之上，则芥为之舟；置杯焉则胶，水浅而舟大也。风之积也不厚，则其负大翼也无力。故九万里，则风斯在下矣，而后乃今培风；背负青天，而莫之夭阏者，而后乃今将图南。</p>
<p class="align-right">庄子  -《逍遥游》</p>
</blockquote>
<p>何以积水如洪，载得大舟；积风若飓，负得大翼。对于一个应用来说，搭建好基础服务是至关重要的。本文通过以下几个方面述说一个Web应用的基础能力。</p>
<h2 class="md-end-block md-heading"><span class="md-plain md-expand">安全</span></h2>
<p> </p>
<h3 class="md-end-block md-p"><span class="md-plain">建设易于配置的访问控制机制</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">与数据模型集成。</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">实体 CRUD 操作和查看/修改特定实体属性的权限。例如，用户可以查看文档，但不能创建、更新或删除文档，并且可以查看除 </span><span class="md-pair-s" spellcheck="false"><code>amount</code></span><span class="md-plain"> 之外的所有文档属性。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">行级访问控制，限制对单个实体实例的访问。例如，用户只能查看在其部门中创建的文档。</span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">与 UI 集成。</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">打开用户界面和查看主菜单项的权限。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">如果可视化组件（例如，文本组件）绑定至实体属性，根据当前用户对该属性的权限会自动将可视化组件变为只读或隐藏。如果用户被拒绝使用实体的 CRUD 操作，则也会禁用相应的表格操作。</span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">使用带注解的 Java 接口声明式的定义角色和权限。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">运行时定义角色和许可，并保存至数据库。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">一组用户界面，用于查看角色和权限、为用户分配角色、创建运行时角色。</span></p>
</li>
</ul>
<h4 class="md-end-block md-heading"><span class="md-plain">资源角色</span></h4>
<p class="md-end-block md-p"><span class="md-plain">资源角色赋予用户对系统中特定对象和操作的权限：对实体的 CRUD 操作权限、实体属性权限、UI 界面权限等。</span></p>
<h5 class="md-end-block md-heading"><span class="md-plain">资源策略</span></h5>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">实体策略指定对实体的 CRUD 操作权限。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">实体属性策略指定对实体属性的操作权限。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">界面策略指定 UI 界面的许可权限。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">菜单策略指定 UI 主菜单项的许可权限。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">特殊策略用于定义任何其他功能的权限，如特定API访问权限。</span></p>
</li>
</ul>
<h4 class="md-end-block md-heading"><span class="md-plain">行级角色</span></h4>
<p class="md-end-block md-p"><span class="md-plain">行级角色支持对特定数据行的访问限制，即，限制对实体实例的访问。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">认证授权</span></h4>
<p class="md-end-block md-p"><span class="md-plain">认证是验证与系统交互的用户或进程的身份的过程。例如，系统可以通过用户名和密码对用户进行认证。对已经认证的用户，系统可以执行授权，检查用户对特定资源的权限。</span></p>
<h5 class="md-end-block md-heading"><span class="md-plain">模式</span></h5>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">授权码模式</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="C:\Users\isush\AppData\Roaming\Typora\typora-user-images\image-20220802111732570.png"><img loading="lazy" src="file:///C:\Users\isush\AppData\Roaming\Typora\typora-user-images\image-20220802111732570.png?lastModify=1660353813" data-is-external-image="true"  alt="image-20220802111732570" data-local-refresh="true"></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">隐式授予模式</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="C:\Users\isush\AppData\Roaming\Typora\typora-user-images\image-20220802112102705.png"><img loading="lazy" src="file:///C:\Users\isush\AppData\Roaming\Typora\typora-user-images\image-20220802112102705.png?lastModify=1660353813" data-is-external-image="true"  alt="image-20220802112102705" data-local-refresh="true"></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">资源所有者密码模式</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="C:\Users\isush\AppData\Roaming\Typora\typora-user-images\image-20220802112039838.png"><img loading="lazy" src="file:///C:\Users\isush\AppData\Roaming\Typora\typora-user-images\image-20220802112039838.png?lastModify=1660353813" data-is-external-image="true"  alt="image-20220802112039838" data-local-refresh="true"></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">客户端凭证模式</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="C:\Users\isush\AppData\Roaming\Typora\typora-user-images\image-20220802112143245.png"><img loading="lazy" src="file:///C:\Users\isush\AppData\Roaming\Typora\typora-user-images\image-20220802112143245.png?lastModify=1660353813" data-is-external-image="true"  alt="image-20220802112143245" data-local-refresh="true"></span></p>
<p class="md-end-block md-p"> </p>
<h4 class="md-end-block md-heading"><span class="md-plain">防暴力破解</span></h4>
<p class="md-end-block md-p"><span class="md-plain">如果启用了保护，则在多次尝试登录失败后，在一段时间内阻止相同用户名和 IP 地址再次登录。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">LDAP 认证</span></h4>
<p class="md-end-block md-p"><span class="md-plain">Spring Security 会在每次认证成功后创建标准的 </span><span class="md-pair-s" spellcheck="false"><code>LdapUserDetails</code></span><span class="md-plain"> 对象，并将对象保留在内存中，而不是从数据库读取 </span><span class="md-pair-s" spellcheck="false"><code>User</code></span><span class="md-plain"> 实体。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">数据加密、解密</span></h4>
<p class="md-end-block md-p"><span class="md-plain"> 身份证、手机号等敏感数据进行加密存储、传输。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">REST API</span></h3>
<p class="md-end-block md-p"><span class="md-plain">通用的 REST API，可以无需编写后端 REST 控制器即可处理数据模型实体和业务服务。能自动开放下列功能接口：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">实体增删查改操作。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">调用注册的服务方法。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">上传和下载文件。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">获取数据模型的信息。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">获取当前用户和用户权限的信息。</span></p>
</li>
</ul>
<h3 class="md-end-block md-heading"><span class="md-plain">组件</span></h3>
<p class="md-end-block md-p"><span class="md-plain">可插拔，丰富功能，具有规范文档。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">搜索</span></h4>
<p class="md-end-block md-p"><span class="md-plain">Elasticsearch中间件，提供全局搜索的能力。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">通知</span></h4>
<p class="md-end-block md-p"><span class="md-plain">信息类通知</span></p>
<p class="md-end-block md-p"><span class="md-plain">系统事件通知</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">文件管理</span></h4>
<p class="md-end-block md-p"><span class="md-plain">对象存储</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">日志</span></h4>
<p class="md-end-block md-p"><span class="md-plain">数据库实体日志</span></p>
<p class="md-end-block md-p"><span class="md-plain">系统事件日志</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">NOSQL</span></h4>
<h5 class="md-end-block md-heading"><span class="md-plain">Redis</span></h5>
<p>Redis是一个内存数据库存储。</p>
<h5 class="md-end-block md-heading"><span class="md-plain">MongoDB</span></h5>
<p>MongoDB被称为磁盘上的文档存储。</p>
<h4 class="md-end-block md-heading"><span class="md-plain">限流</span></h4>
<p>限流的常见算法有以下三种：<br><br>时间窗口算法<br>漏桶算法<br>令牌算法</p>
<h3 class="md-end-block md-p">接口幂等</h3>
<p>接口幂等性就是用户对于同一个接口发起的一次请求或者多次请求的结果是一致的，<br>不会因为多次请求而产生不同的结果。</p>
<h4>可重入分布式锁</h4>
<pre>RLock lock = redisson.getLock("唯一请求ID");<br><br>// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁<br>boolean res = lock.tryLock(100, 10, TimeUnit.SECONDS);<br>if (res) {<br>   try {<br>     ...<br>   } finally {<br>       lock.unlock();<br>   }<br>}</pre>
<h2 class="md-end-block md-heading"><span class="md-plain">拓展</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">分布式数据（高并发）</span></h3>
<h4 class="md-end-block md-heading"><span class="md-plain">可扩展性</span></h4>
<p class="md-end-block md-p"><span class="md-plain">如果你的数据量、读取负载、写入负载超出单台机器的处理能力，可以将负载分散到多台计算机上。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">容错/高可用性</span></h4>
<p class="md-end-block md-p"><span class="md-plain">如果你的应用需要在单台机器（或多台机器，网络或整个数据中心）出现故障的情况下仍然能继续工作，则可使用多台机器，以提供冗余。一台故障时，另一台可以接管。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">延迟</span></h4>
<p class="md-end-block md-p"><span class="md-plain">如果在世界各地都有用户，你也许会考虑在全球范围部署多个服务器，从而每个用户可以从地理上最近的数据中心获取服务，避免了等待网络数据包穿越半个世界。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">分布式问题</span></h4>
<p class="md-end-block md-p"><span class="md-plain">分布式系统中可能发生的各种问题，包括：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">当您尝试通过网络发送数据包时，数据包可能会丢失或任意延迟。同样，答复可能会丢失或延迟，所以如果你没有得到答复，你不知道消息是否通过。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">节点的时钟可能会与其他节点显著不同步（尽管您尽最大努力设置NTP），它可能会突然跳转或跳回，依靠它是很危险的，因为您很可能没有好的测量你的时钟的错误间隔。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">一个进程可能会在其执行的任何时候暂停一段相当长的时间（可能是因为世界上的垃圾收集器），被其他节点宣告死亡，然后再次复活，却没有意识到它被暂停了。</span></p>
</li>
</ul>
<h4 class="md-end-block md-heading"><span class="md-plain">一致性与共识</span></h4>
<p class="md-end-block md-p"><span class="md-plain">数据库主从复制提供最终一致性功能。但收敛（convergence）操作之前可能会发生读不一致的情况。例如写入一个值立刻读取，并不能保证看到刚写入的值，因为读请求可能会被路由到另一个副本上。</span></p>
<h5 class="md-end-block md-heading"><span class="md-plain">线性一致性</span></h5>
<p class="md-end-block md-p"><span class="md-plain">使系统看起来好像只有一个数据副本。</span></p>
<h5 class="md-end-block md-heading md-focus"><span class="md-plain">共识算法</span></h5>
<p> </p>
            ]]>
        </content>
    </entry>
</feed>
